// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  AuthorComplainets  Complaint[]        @relation("AuthorComplainets")
  ApproverComplaints Complaint[]        @relation("ApproverComplaints")
  WhiteListAccounts  WhiteListAccounts?
  createdAt          DateTime           @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Complaint {
  complaintId   String   @id @default(uuid()) @db.Uuid
  title         String   @db.VarChar(255)
  createdAt     DateTime @default(now())
  content       String?
  isApproved    Boolean  @default(false)
  location      String?
  images        String[]
  licensePlate  String?
  featuredImage String?

  authorId    String
  isAnonymous Boolean   @default(true)
  approvedAt  DateTime?
  approverId  String?
  Author      User      @relation("AuthorComplainets", fields: [authorId], references: [id])
  Approver    User?     @relation("ApproverComplaints", fields: [approverId], references: [id])
}

model WhiteListAccounts {
  id        String @id @default(cuid())
  accountId String

  AllowedAccount User     @relation(fields: [accountId], references: [id])
  createdAt      DateTime @default(now())

  @@unique(accountId)
}
